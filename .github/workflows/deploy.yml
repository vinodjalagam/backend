---
name: Blue-Green Deployment with Docker Compose
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Install dependencies
        run: npm install
      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      - name: Deploy to Blue Environment
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
        run: >
          echo "$SSH_PRIVATE_KEY" > private_key.pem

          chmod 600 private_key.pem


          # Ensure the directory exists

          ssh -i private_key.pem $USERNAME@$HOST "mkdir -p /home/$USERNAME/backend-blue"


          # Copy files to the VM

          scp -i private_key.pem -r ./* $USERNAME@$HOST:/home/$USERNAME/backend-blue/


          # Run commands on the VM

          ssh -i private_key.pem $USERNAME@$HOST << 'EOF'
            cd /home/$USERNAME/backend-blue
            sudo apt update
            sudo apt install npm -y
            sudo npm install -g pm2
            # Ensure the package.json file is present
            npm install
            

            # Check if index.js exists
            if [ -f index.js ]; then
              pm2 start index.js --name backend-blue --port 8081
            else
              echo "index.js not found!"
              exit 1
            fi
          EOF
      - name: Verify Blue Environment
        run: curl --fail http://${{ secrets.HOST }}:8081/sayHello
      - name: Switch Traffic to Blue Environment
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          USERNAME: ${{ secrets.USERNAME }}
          HOST: ${{ secrets.HOST }}
        run: >
          echo "$SSH_PRIVATE_KEY" > private_key.pem

          chmod 600 private_key.pem


          # Upload Nginx configuration

          scp -i private_key.pem nginx-blue.conf $USERNAME@$HOST:/tmp/nginx-blue.conf


          # Apply Nginx configuration

          ssh -i private_key.pem $USERNAME@$HOST << 'EOF'
            sudo mv /tmp/nginx-blue.conf /etc/nginx/sites-available/default
            sudo ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/
            sudo nginx -t
            sudo systemctl reload nginx
          EOF
      - name: Clean Up Green Environment
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Shut down the green environment
          ssh -i private_key.pem $USERNAME@$HOST << 'EOF'
            pm2 stop backend-green || true
            pm2 delete backend-green || true
          EOF
