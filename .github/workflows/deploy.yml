---
name: Blue-Green Deployment
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Install dependencies
        run: npm install
      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      - name: Install Nginx
        run: |
          sudo apt update -y
          sudo apt install -y nginx
          sudo ufw allow 'Nginx HTTP'
          sudo ufw allow 'Nginx HTTPS'
          sudo systemctl start nginx
      - name: Deploy to VM
        env:
          SSH_PRIVATE_KEY_1: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST_1: ${{ secrets.HOST }}
          SSH_USERNAME_1: ${{ secrets.USERNAME }}
        run: >
          # Write the SSH private key to a file

          echo "$SSH_PRIVATE_KEY_1" > private_key.pem

          chmod 600 private_key.pem
          # Determine active environment
         
          ACTIVE_ENV=$(ssh -i private_key.pem $SSH_USERNAME_1@$SSH_HOST_1 'if [ -d /home/$SSH_USERNAME_1/backend-blue ]; then echo "blue"; else echo "green"; fi')
          
          echo "Active environment: $ACTIVE_ENV"
          
          if [ "$ACTIVE_ENV" = "blue" ]; then
          
            DEPLOY_DIR="/home/$SSH_USERNAME_1/backend-green"
          
          else
          
            DEPLOY_DIR="/home/$SSH_USERNAME_1/backend-blue"
          
          fi
          
          echo "Deploying to $DEPLOY_DIR"
          # Create deployment directory on the remote server
          
          ssh -i private_key.pem $SSH_USERNAME_1@$SSH_HOST_1 "sudo mkdir -p $DEPLOY_DIR && sudo chown $SSH_USERNAME_1:$SSH_USERNAME_1 $DEPLOY_DIR"
          # Deploy code to the determined directory
          
          
          scp -i private_key.pem -r ./* $SSH_USERNAME_1@$SSH_HOST_1:$DEPLOY_DIR/
          # Execute deployment steps
          
          ssh -i private_key.pem $SSH_USERNAME_1@$SSH_HOST_1 << EOF
            cd $DEPLOY_DIR
            echo 'Deployment steps go here'
          EOF

          ssh -i private_key.pem $SSH_USERNAME_1@$SSH_HOST_1 << EOF
            cd $DEPLOY_DIR
            sudo apt update -y
            sudo apt install npm -y
            sudo npm install -g pm2 -y
            if [ -f package.json ]; then
              npm install -y
            else
              echo "package.json not found!"
              exit 1
            fi
            if [ -f index.js ]; then
              pm2 stop $DEPLOY_DIR || true
              pm2 start index.js --name $DEPLOY_DIR --watch -f
            else
              echo "index.js not found!"
              exit 1
            fi
          EOF
      # - name: Health Check New Environment
      #   run: |
      #     NEW_ENV=$(ssh -i private_key.pem $SSH_USERNAME_1@$SSH_HOST_1 'if [ -d /home/$SSH_USERNAME_1/backend-blue ]; then echo "green"; else echo "blue"; fi')
                   
      #     echo "New environment: $NEW_ENV"
          
      #     if [ "$NEW_ENV" = "green" ]; then
      #       curl -f http://localhost:8086/sayHello || exit 1
      #     else
      #       curl -f http://localhost:8085/sayHello || exit 1
      #     fi
      - name: Configure Nginx
          env:
          SSH_PRIVATE_KEY_1: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_USERNAME_1: ${{ secrets.USERNAME }}
          SSH_HOST_1: ${{ secrets.HOST }}
          run: |
          echo "$SSH_PRIVATE_KEY_1" > private_key.pem
          chmod 600 private_key.pem

          ACTIVE_ENV=$(ssh -i private_key.pem $SSH_USERNAME_1@$SSH_HOST_1 'if [ -d /home/$SSH_USERNAME_1/backend-blue ]; then echo "blue"; else echo "green"; fi')
          echo "Active environment: $ACTIVE_ENV"
  
          if [ "$ACTIVE_ENV" = "blue" ]; then
             NEW_ENV="green"
             DEPLOY_DIR="/home/$SSH_USERNAME_1/backend-green"
          else
             NEW_ENV="blue"
             DEPLOY_DIR="/home/$SSH_USERNAME_1/backend-blue"
          fi
  
          echo "New environment: $NEW_ENV"
          echo "Deploy directory: $DEPLOY_DIR"
  
          # Deploy the new environment
          ssh -i private_key.pem $SSH_USERNAME_1@$SSH_HOST_1 "mkdir -p $DEPLOY_DIR"
          rsync -avz --delete -e "ssh -i private_key.pem" ./ $SSH_USERNAME_1@$SSH_HOST_1:$DEPLOY_DIR/
  
          # Update Nginx configuration
          if [ "$NEW_ENV" = "green" ]; then
            ssh -i private_key.pem $SSH_USERNAME_1@$SSH_HOST_1 "sudo sed -i 's/set \$upstream_backend backend_blue;/set \$upstream_backend backend_green;/' /etc/nginx/nginx.conf"
          else
            ssh -i private_key.pem $SSH_USERNAME_1@$SSH_HOST_1 "sudo sed -i 's/set \$upstream_backend backend_green;/set \$upstream_backend backend_blue;/' /etc/nginx/nginx.conf"
          fi
  
          # Reload Nginx to apply changes
          ssh -i private_key.pem $SSH_USERNAME_1@$SSH_HOST_1 "sudo systemctl reload nginx"
  
      - name: Verify deployment
        run: |
          NEW_ENV=${{ steps.new-env.outputs.env }}
          if [ "$NEW_ENV" = "green" ]; then
            curl -f http://localhost:8085/sayHello || exit 1
          else
            curl -f http://localhost:8086/sayHello || exit 1
            
  
            
            
            

          


          

      #     scp -i private_key.pem default.template $SSH_USERNAME_1@$SSH_HOST_1:/tmp/default.template
      #     ssh -i private_key.pem $SSH_USERNAME_1@$SSH_HOST_1 << EOF      
      #     export ACTIVE_ENV=$NEW_ENV

      #     #envsubst '\$ACTIVE_ENV' < /tmp/default.template > /etc/nginx/sites-available/default
            
      #       # envsubst '\$ACTIVE_ENV'  /tmp/default.template > /etc/nginx/sites-available/default
      #       sed -i 's/\$ACTIVE_ENV/$NEW_ENV/g' /tmp/default.template
      #       sudo cp /tmp/default.template /etc/nginx/sites-available/default

      #       sudo mkdir -p /etc/nginx/switch
      #       sudo nginx -t
      #       sudo systemctl start nginx
      #       sudo systemctl reload nginx
      #     EOF
      # - name: Test Deployment
      #   env:
      #     SSH_HOST_1: ${{ secrets.HOST }}
      #   run: >
      #     curl -s http://localhost/sayHello || (echo "Deployment failed!" && exit
      #     1)
