---
name: Deploy API
on:
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-node-app2:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/my-node-app2:latest
      - name: Add SSH host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 22 ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      - name: Deploy to VM
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
          USERNAME: ${{ secrets.USERNAME }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/my-node-app2:latest
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Debugging: Print environment variables
          echo "DOCKER_IMAGE: $DOCKER_IMAGE"
          echo "HOST: $HOST"
          echo "USERNAME: $USERNAME"

          # SSH into the server and run commands
          ssh -i private_key.pem $USERNAME@$HOST << EOF
            # Debugging: Print Docker version and existing containers
            docker --version
            docker ps -a

            echo "Pulling Docker image $DOCKER_IMAGE"
            docker pull $DOCKER_IMAGE
            
            echo "Stopping and removing any existing container named node-app1"
            docker stop node-app1 || true
            docker rm node-app1 || true

            echo "Running new container"
            docker run -d --name node-app1 -p 80:3000 $DOCKER_IMAGE
          EOF
